// controllers/statistiquesController.js
import supabase from '../config/db.js'

export const getStatistiques = async (req, res) => {
Â  try {
Â  Â  const profil = req.user.profil
Â  Â  const userDept = req.user.departement_id

Â  Â  // ðŸ§  Normalisation et DÃ©finition du filtre selon le rÃ´le
Â  Â  const normalizedProfil = profil.toLowerCase().replace(/\s+/g, '_'); 
Â  Â  
Â  Â  let deptFilter = {}
    let dossierFilter = {}

    // Les filtres s'appliquent sur les colonnes 'departement_id' et 'cree_par'
    
    // CAS 1 : Admin ou SD (Voient tout)
    if (normalizedProfil === 'admin' || normalizedProfil === 'sd') {
        deptFilter = {} // Filtre vide
    } 
    // CAS 2 : Directeur DÃ©partemental (Voit uniquement son dÃ©partement)
    else if (normalizedProfil === 'directeur_departemental') {
Â  Â  Â  // Le filtre s'applique sur les motos, propriÃ©taires et dossiers
      deptFilter = { departement_id: userDept } 
      dossierFilter = { departement_id: userDept } // Peut Ãªtre diffÃ©rent si la colonne du dÃ©partement est dans la table des dossiers
Â  Â  } 
    // CAS 3 : Agent (Voit son dÃ©partement et ses propres saisies)
    else if (normalizedProfil === 'agent' || normalizedProfil === 'agent_saisie') {
Â  Â  Â  // Les agents sont gÃ©nÃ©ralement associÃ©s Ã  la saisie de la moto/propriÃ©taire
      deptFilter = { departement_id: userDept, cree_par: req.user.id }
      // Les dossiers sont validÃ©s par d'autres, le filtre ne doit porter que sur le dÃ©partement
      dossierFilter = { departement_id: userDept } 
Â  Â  }
Â  Â  
Â  Â  // ======================
Â  Â  // ðŸ”¹ Total motos (UtilisÃ© pour total_enregistrements)
Â  Â  // ======================
Â  Â  const { count: totalMotos, error: errMotos } = await supabase
Â  Â  Â  .from('motos')
Â  Â  Â  .select('id', { count: 'exact', head: true })
Â  Â  Â  .match(deptFilter) // Utilisation du filtre basÃ© sur le profil
Â  Â  if (errMotos) throw errMotos

    // ======================
    // ðŸŽ¯ NOUVEAU : Total Dossiers en attente de Validation DD
    // ======================
    // Utilisez le filtre des dossiers (dossierFilter)
    const filterAttente = { ...dossierFilter, statut: 'en_attente_validation_officielle' }
    const { count: enAttente, error: errAttente } = await supabase
        .from('dossiers')
        .select('id', { count: 'exact', head: true })
        .match(filterAttente)
    if (errAttente) throw errAttente

    // ======================
    // ðŸŽ¯ NOUVEAU : Total Dossiers ValidÃ©s (Certificats Officiels)
    // ======================
    const filterValides = { ...dossierFilter, statut: 'validÃ©' }
    const { count: valides, error: errValides } = await supabase
        .from('dossiers')
        .select('id', { count: 'exact', head: true })
        .match(filterValides)
    if (errValides) throw errValides


Â  Â  // ======================
Â  Â  // ðŸ”¹ Total propriÃ©taires
Â  Â  // ======================
Â  Â  const { count: totalProprietaires, error: errProp } = await supabase
Â  Â  Â  .from('proprietaires')
Â  Â  Â  .select('id', { count: 'exact', head: true })
Â  Â  Â  .match(deptFilter)
Â  Â  if (errProp) throw errProp

Â  Â  // ======================
Â  Â  // ðŸ”¹ Motos par marque
Â  Â  // ======================
Â  Â  const { data: motosParMarque, error: errMarque } = await supabase
Â  Â  Â  .from('motos')
Â  Â  Â  .select('marque')
Â  Â  Â  .match(deptFilter)
Â  Â  if (errMarque) throw errMarque

Â  Â  const statsMarque = motosParMarque.reduce((acc, moto) => {
Â  Â  Â  acc[moto.marque] = (acc[moto.marque] || 0) + 1
Â  Â  Â  return acc
Â  Â  }, {})

Â  Â  // ======================
Â  Â  // ðŸ”¹ Motos par structure
Â  Â  // ======================
Â  Â  const { data: motosParStructure, error: errStructure } = await supabase
Â  Â  Â  .from('motos')
Â  Â  Â  .select('structure_id')
Â  Â  Â  .match(deptFilter)
Â  Â  if (errStructure) throw errStructure

Â  Â  const statsStructure = motosParStructure.reduce((acc, moto) => {
Â  Â  Â  acc[moto.structure_id] = (acc[moto.structure_id] || 0) + 1
Â  Â  Â  return acc
Â  Â  }, {})

Â  Â  // ======================
Â  Â  // ðŸ”¹ Motos enregistrÃ©es ce mois
Â  Â  // ======================
Â  Â  const debutMois = new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString()
Â  Â  const { data: motosCeMois, error: errMois } = await supabase
Â  Â  Â  .from('motos')
Â  Â  Â  .select('id')
Â  Â  Â  .match(deptFilter)
Â  Â  Â  .gte('date_saisie', debutMois)
Â  Â  if (errMois) throw errMois

Â  Â  // ======================
Â  Â  // âœ… RÃ©sultat final (CLÃ‰S MISES Ã€ JOUR POUR LE FRONTEND)
Â  Â  // ======================
Â  Â  res.json({
Â  Â  Â  message: 'Statistiques chargÃ©es avec succÃ¨s',
Â  Â  Â  profil_utilisateur: profil,
Â  Â  Â  departement_id: userDept || null,
Â  Â  Â  
      // ðŸŽ¯ CLÃ‰S ATTENDUES PAR LE FRONTEND :
Â  Â  Â  total_enregistrements: totalMotos,
Â  Â  Â  en_attente_validation_officielle: enAttente,
Â  Â  Â  validÃ©: valides,
      
      // Autres statistiques:
Â  Â  Â  total_proprietaires: totalProprietaires,
Â  Â  Â  motos_par_marque: statsMarque,
Â  Â  Â  motos_par_structure: statsStructure,
Â  Â  Â  motos_ce_mois: motosCeMois.length
Â  Â  })
Â  } catch (err) {
Â  Â  // ðŸ›‘ Fournir le message d'erreur pour aider au dÃ©bogage
Â  Â  console.error("Erreur Statistiques:", err.message); 
Â  Â  res.status(500).json({
Â  Â  Â  message: 'Erreur lors de la rÃ©cupÃ©ration des statistiques',
Â  Â  Â  erreur: err.message
Â  Â  })
Â  }
}