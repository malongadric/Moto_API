// controllers/immatriculationController.js
import supabase from '../config/db.js';

export const attribuerNumero = async (req, res) => {
    try {
        // üîπ Conversion et v√©rification de l'ID de moto
        const motoId = parseInt(req.params.motoId, 10);
        console.log('Attribuer immatriculation pour motoId:', motoId, 'de type', typeof motoId);

        if (isNaN(motoId)) {
            return res.status(400).json({ message: 'ID de moto invalide.' });
        }

        // üîπ R√©cup√©ration des infos utilisateur
        const userId = req.user.id;
        const userRole = req.user.profil;
        const departementId = req.user.departement_id;

        if (userRole !== 'admin') {
            return res.status(403).json({ message: 'Vous n‚Äôavez pas le droit d‚Äôattribuer un num√©ro.' });
        }

        // 1Ô∏è‚É£ R√©cup√©ration du dossier li√© √† la moto
        const { data: dossierData, error: dossierError } = await supabase
            .from('dossier')      // utiliser le nom exact de la table Supabase
            .select('id')
            .eq('moto_id', motoId)
            .maybeSingle();       // √©vite l'erreur 404 automatique

        if (dossierError) {
            console.error('Erreur r√©cup√©ration dossier:', dossierError.message);
            return res.status(500).json({ message: 'Erreur interne lors de la r√©cup√©ration du dossier.' });
        }
        if (!dossierData) {
            console.error('Dossier non trouv√© pour la moto:', motoId);
            return res.status(404).json({ message: 'Dossier associ√© √† cette moto introuvable.' });
        }

        const dossierIdToUpdate = dossierData.id;
        console.log(`Dossier ID trouv√© pour mise √† jour: ${dossierIdToUpdate}`);

        // 2Ô∏è‚É£ V√©rifie si la moto a d√©j√† un num√©ro
        const { data: existing } = await supabase
            .from('immatriculations')
            .select('id')
            .eq('moto_id', motoId)
            .maybeSingle();

        if (existing) {
            return res.status(400).json({ message: 'Cette moto a d√©j√† un num√©ro d‚Äôimmatriculation.' });
        }

        const typeVehicule = 'TAXI';

        // 3Ô∏è‚É£ R√©cup√®re la s√©quence et g√©n√®re la prochaine immatriculation
        let { data: sequenceData, error: seqError } = await supabase
            .from('sequences_immatriculations')
            .select('*')
            .eq('departement_id', departementId)
            .eq('type_vehicule', typeVehicule)
            .maybeSingle();

        if (seqError) throw seqError;

        if (!sequenceData) {
            // Cr√©ation d'une s√©quence si inexistante
            const { data: newSeq, error: newSeqError } = await supabase
                .from('sequences_immatriculations')
                .insert([{ departement_id: departementId, type_vehicule: typeVehicule, last_sequence: 0, last_serie: 'A' }])
                .select()
                .maybeSingle();
            if (newSeqError) throw newSeqError;
            sequenceData = newSeq;
        }

        let nextSequence = sequenceData.last_sequence + 1;
        let nextSerie = sequenceData.last_serie;
        if (nextSequence > 999) {
            nextSequence = 1;
            nextSerie = String.fromCharCode(nextSerie.charCodeAt(0) + 1);
            if (nextSerie > 'Z') nextSerie = 'A';
        }

        const seqFormatted = String(nextSequence).padStart(3, '0');
        const numeroImmatriculation = `${typeVehicule} ${seqFormatted} ${nextSerie}${departementId}`;

        // 4Ô∏è‚É£ Mise √† jour de la s√©quence
        const { error: updateSeqError } = await supabase
            .from('sequences_immatriculations')
            .update({ last_sequence: nextSequence, last_serie: nextSerie })
            .eq('departement_id', departementId)
            .eq('type_vehicule', typeVehicule);

        if (updateSeqError) throw updateSeqError;

        // 5Ô∏è‚É£ Ins√®re dans la table immatriculations
        const { data: immatriculationData, error: insertError } = await supabase
            .from('immatriculations')
            .insert([{
                moto_id: motoId,
                numero_immatriculation: numeroImmatriculation,
                attribue_par: userId
            }])
            .select()
            .maybeSingle();

        if (insertError) throw insertError;

        // 6Ô∏è‚É£ Met √† jour le dossier avec l'immatriculation provisoire
        const { error: updateDossierError } = await supabase
            .from('dossier')      // m√™me table que pour la r√©cup√©ration
            .update({ immatriculation_provisoire: numeroImmatriculation })
            .eq('id', dossierIdToUpdate);

        if (updateDossierError) console.error('Erreur mise √† jour dossier:', updateDossierError);

        // 7Ô∏è‚É£ Retour API
        res.status(201).json({
            message: 'Num√©ro attribu√© avec succ√®s',
            numeroImmatriculation,
            immatriculation: immatriculationData
        });

    } catch (err) {
        console.error('Erreur attribuerNumero:', err);
        res.status(500).json({
            message: 'Erreur lors de l‚Äôattribution du num√©ro',
            erreur: err.message
        });
    }
};
